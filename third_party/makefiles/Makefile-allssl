# Makefile to build (Open|Libre)SSL for Tunnelblick
#
# Copyright 2004, 2005, 2006, 2007, 2008, 2009 Angelo Laub
# Contributions by Jonathan K. Bullard Copyright 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2018, 2020, 2021. All rights reserved.
#
#  This file is part of Tunnelblick.
#
#  Tunnelblick is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2
#  as published by the Free Software Foundation.
#
#  Tunnelblick is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program (see the file COPYING included with this
#  distribution); if not, write to the Free Software Foundation, Inc.,

built-allssl-prepare:
	@echo "THIRD_PARTY: Extracting all SSL variants..."
	mkdir -p $(BUILD_DIR)
	find -xsE $(SOURCES_DIR) -depth 1 -type f -iregex ".*/(libre|open){1}ssl-.*tar.gz$$" -exec tar -x -C $(BUILD_DIR) -f {} \; > /dev/null ;
	@echo "THIRD_PARTY: Patching all SSL variants..."
	if [ -d "$(PATCHES_DIR)/ssl" ]; then \
		for ssldir in $$(find -xsE $(BUILD_DIR) -depth 1 -type d -iregex ".*/(libre|open){1}ssl-.*" ); do \
			sslversion=$${ssldir##*/}; \
			sslvariant=$${sslversion%-*}; \
			if [ -d "$(PATCHES_DIR)/ssl/$${sslversion}" ] ; then \
			for patch_file in $(PATCHES_DIR)/ssl/$${sslversion}/*.diff ; do \
				patch -p1 -N --dry-run -d $${ssldir} -i $${patch_file} > /dev/null 2>&1; \
				if [ $$? == 0 ]; then \
					patch -p1 -N -d $${ssldir} -i $${patch_file} > /dev/null 2>&1; \
					if [ $$? == 0 ]; then \
						echo "$${sslversion} patch applied: $${patch_file##*/}" ; \
					else \
						echo "error: $${sslversion} patch failed after a successful dry run: $${patch_file##*/}" ; \
					fi \
				else \
					echo "error: $${sslversion} patch could not be applied: $${patch_file##*/}" ; \
				fi \
			done\
			fi ; \
		done \
	fi ; \
	touch built-allssl-prepare

built-allssl: built-allssl-prepare
	@echo "THIRD_PARTY: Building all SSL variants..."
	for ssldir in $(shell find -xsE $(BUILD_DIR) -depth 1 -type d -iregex ".*/(libre|open){1}ssl-.*" ); do \
		sslversion=$${ssldir##*/}; \
		sslvariant=$${sslversion%-*}; \
		if [ "$${sslvariant:0:7}" = "openssl" ] ; then \
			if [ "$${sslversion:0:11}" = "openssl-1.1" ] ; then \
				buildarch="$(OPENSSL_1_1_TARGET_ARCHS)" ; \
			elif [ "$${sslversion:0:11}" = "openssl-3.0" ] ; then \
				buildarch="$(OPENSSL_3_0_TARGET_ARCHS)" ; \
			else \
				echo "error: Unknown OpenSSL version '$${sslversion}'. Must begin with 'openssl-1.0' or 'openssl-1.1'" ; \
				exit 255 ; \
			fi ; \
		else \
			echo "error: Unknown SSL variant '$${sslvariant}'. Must be 'openssl'" ; \
			exit 255 ; \
		fi ; \
		for a in $${buildarch}; do \
			if [ "$${sslvariant:0:7}" = "openssl" ] ; then \
				if [ "$$a" = "$(TB_COMMON_X86_ARCH)" ] ; then \
					ssl_arch="$(TB_OPENSSL_X86_ARCH)" ; \
				elif [ "$$a" = "$(TB_COMMON_ARM_ARCH)" ] ; then \
					ssl_arch="$(TB_OPENSSL_ARM_ARCH)" ; \
				else \
					echo "error: Unknown architecture '$$a' cannot be translated to a triple for building OpenSSL" ; \
					exit 255; \
				fi ; \
			fi; \
            if [ "$${a:0:3}" = "arm" ] ; then \
                TB_CONFIGURE_BUILD="arm-apple-darwin" ; \
            else \
                TB_CONFIGURE_BUILD="$$a-apple-darwin" ; \
            fi ; \
			cd $${ssldir}; \
			staging="$(STAGING_DIR)/$${sslversion}_$$a"; \
			echo "Clean $${sslversion} for $$a ($$ssl_arch)" ; \
			$(MAKE) clean; \
			echo "Make $${sslversion} for $$a ($$ssl_arch)" ; \
			echo "CC: $(CC)"; \
			echo "CFLAGS: $(CFLAGS)"; \
			if [ "$${sslversion}" = "$(OPENSSL_1_1_NAME)" ] || [ "$${sslversion}" = "$(OPENSSL_3_0_NAME)" ] ; then \
				CC=$(CC) CFLAGS="$(CFLAGS) -arch $$a" ./Configure no-shared zlib no-asm --openssldir="$$staging" $$ssl_arch; \
				$(MAKE) build_libs build_apps openssl.pc libssl.pc libcrypto.pc; \
				echo "Install $${sslversion} for $$a to $$staging" ; \
				$(MAKE) DESTDIR="$$staging" install_sw; \
				mv "$$staging/usr/local/bin"     "$$staging/bin" ;\
				mv "$$staging/usr/local/lib"     "$$staging/lib" ; \
				mv "$$staging/usr/local/include" "$$staging/include" ; \
				rm -fr "$$staging/usr" ; \
			else \
				echo "error: do not know how to build '$${sslvariant}' ($${sslversion})" ; \
			fi ; \
			cd .. ; \
		done ; \
		mkdir -p "$(PRODUCTS_DIR)/$$sslversion" ; \
		lipo $(STAGING_DIR)/$$sslversion*/bin/openssl -create -output "$(PRODUCTS_DIR)/$$sslversion/openssl"; \
	done
	cd $(TOPDIR)
	touch built-allssl

built-allssl-clean:
	@echo "THIRD_PARTY: Cleaning all SSL variants..."
	find -xsdE $(BUILD_DIR)   -depth 1 -type d -iregex ".*/(libre|open){1}ssl-.*" -exec rm -f -R {} \;
	find -xsdE $(STAGING_DIR) -depth 1 -type d -iregex ".*/(libre|open){1}ssl-.*" -exec rm -f -R {} \;
	rm -f built-allssl built-allssl-prepare
