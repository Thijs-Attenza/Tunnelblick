# Makefile to build Sparkle.framework for Tunnelblick
#
# Copyright 2004, 2005, 2006, 2007, 2008, 2009 Angelo Laub
# Contributions by Jonathan K. Bullard Copyright 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2018, 2020. All rights reserved.
#
#  This file is part of Tunnelblick.
#
#  Tunnelblick is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2
#  as published by the Free Software Foundation.
#
#  Tunnelblick is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program (see the file COPYING included with this
#  distribution); if not, write to the Free Software Foundation, Inc.,
#  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#  or see http://www.gnu.org/licenses/.
#
#
# NOTE: unzip creates a __MACOSX folder in BUILD_DIR (not in SPARKLE_BUILD_DIR).
#       That folder is not needed, so it is deleted after the unzip and at other
#       times it could exist (if the build was interrupted between the unzip and rm).
#

TB_SPARKLE_DEPRECATED_HANDLING = GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS=NO -UseModernBuildSystem=NO
SPARKLE_BUILD_DIR = $(BUILD_DIR)/sparkle
SPARKLE_PRODUCTS_DIR = $(PRODUCTS_DIR)/sparkle

built-sparkle-prepare:
	mkdir -p build ;                                                                    \
	rm -f -r "$(SPARKLE_BUILD_DIR)" ;                                                   \
	rm -f -r "$(BUILD_DIR)/__MACOSX" ;                                                  \
	if [ -d "$(SOURCES_DIR)/$(SPARKLE_NAME)" ] ; then                                   \
		echo "THIRD_PARTY: Using already-expanded $(SPARKLE_NAME)" ;                    \
		mkdir "$(SPARKLE_BUILD_DIR)" ;                                                  \
		cp -a -f -R "$(SOURCES_DIR)/$(SPARKLE_NAME)"/* "$(SPARKLE_BUILD_DIR)" ;         \
	else                                                                                \
		if [ -f "$(SOURCES_DIR)/$(SPARKLE_NAME).tar.gz" ] ; then                        \
			echo "THIRD_PARTY: Expanding $(SPARKLE_NAME).tar.gz..." ;                   \
			tar -x -C "$(BUILD_DIR)" -f "$(SOURCES_DIR)/$(SPARKLE_NAME).tar.gz" ;       \
			mv "$(BUILD_DIR)/$(SPARKLE_NAME)" "$(BUILD_DIR)/sparkle" ;                  \
		else                                                                            \
			if [ -f "$(SOURCES_DIR)/$(SPARKLE_NAME).zip" ] ; then                       \
				echo "THIRD_PARTY: Expanding $(SPARKLE_NAME).zip..." ;                  \
				cd "$(BUILD_DIR)";                                                      \
				unzip -q "$(SOURCES_DIR)/$(SPARKLE_NAME).zip" ;                         \
				mv "$(BUILD_DIR)/Sparkle"      "$(BUILD_DIR)/sparkle_temp" ;            \
				mv "$(BUILD_DIR)/sparkle_temp" "$(BUILD_DIR)/sparkle" ;                 \
				rm -f -r "$(BUILD_DIR)/__MACOSX" ;                                      \
			else                                                                        \
				echo "THIRD_PARTY: No '$(SPARKLE_NAME)', '$(SPARKLE_NAME).tar.gz', or $(SPARKLE_NAME).zip" ;  \
				exit 123 ;                                                              \
			fi ;                                                                        \
		fi ;                                                                            \
	fi
	@echo "THIRD_PARTY: Patching Sparkle.framework..."
	if [ -d "$(PATCHES_DIR)/sparkle" ]; then \
		cd "$(SPARKLE_BUILD_DIR)"; \
		patches="`ls "$(PATCHES_DIR)/sparkle/"*.diff`" ; \
		for patch_file in $${patches}; do \
			patch_name="$$(basename "$${patch_file}")" ; \
			patch -p1 -N --dry-run -i "$$patch_file" > /dev/null; \
			if [ $$? == 0 ]; then \
				patch -p1 -N -i $$patch_file; \
				if [ $$? == 0 ]; then \
				    echo "Sparkle patch applied: $${patch_name}" ; \
				else \
					echo "error: Sparkle patch failed after a successful dry run: $${patch_name}" ; \
				fi \
			else \
				echo "error: Sparkle patch could not be applied: $${patch_name}" ; \
			fi \
		done; \
		sed -i '' -e "s|@OPENSSL_STAGING_DIR@|$(OPENSSL_1_0_STAGING_DIR)|g" \
			  -e "s|@TARGET_ARCH@|$(CURRENT_ARCH)|g" \
			     "$(SPARKLE_BUILD_DIR)/Sparkle.xcodeproj/project.pbxproj" ; \
		echo "Patched Sparkle.xcodeproj @OPENSSL_STAGING_DIR@ to $(OPENSSL_1_0_STAGING_DIR)" ; \
		echo "Patched Sparkle.xcodeproj @TARGET_ARCH@ to $(CURRENT_ARCH)" ; \
		if [ -e "$(PATCHES_DIR)/sparkle/de.lproj/Sparkle.strings" ] ; then \
			cp -f -p -X "$(PATCHES_DIR)/sparkle/de.lproj/Sparkle.strings" "de.lproj/Sparkle.strings" ; \
			cp -f -p -X "$(PATCHES_DIR)/sparkle/it.lproj/Sparkle.strings" "it.lproj/Sparkle.strings" ; \
			cp -f -p -X "$(PATCHES_DIR)/sparkle/ru.lproj/Sparkle.strings" "ru.lproj/Sparkle.strings" ; \
			cp -f -p -X "$(PATCHES_DIR)/sparkle/sv.lproj/Sparkle.strings" "sv.lproj/Sparkle.strings" ; \
			echo "Sparkle de, it, ru, and sv UTF-16 .strings files replaced with UTF-8 .strings files." ; \
		fi ; \
		if [ ! -d "build/Release" ] ; then \
			mkdir -p "build/Release" ; \
		fi ; \
	else \
		echo "No Sparkle patches" ; \
	fi
	touch built-sparkle-prepare
	@echo "THIRD_PARTY: Patched Sparkle.framework"

built-sparkle: built-sparkle-prepare
	@echo "THIRD_PARTY: Building Sparkle.framework for '$(ARCHS)' with deploy-target '$(MACOSX_DEPLOYMENT_TARGET)' and SDK path '$(SDK_DIR)'" ;
	for d in build build/Release build/Debug ; do \
    	if [ -e "$(SPARKLE_BUILD_DIR)/$$d" ] ; then \
	    	xattr -w com.apple.xcode.CreatedByBuildSystem true "$(SPARKLE_BUILD_DIR)/$$d" ; \
		    echo "Did xattr $(SPARKLE_BUILD_DIR)/$$d to avoid Xcode complaints when cleaning" ; \
	    else \
		    echo "Did not xattr $(SPARKLE_BUILD_DIR)/$$d" ; \
	    fi ; \
	done ;
	SPARKLE_ARCHS="$(foreach f, $(SPARKLE_TARGET_ARCHS), -arch $f)" ; \
	SPARKLE_FLAGS="$(TB_SPARKLE_DEPRECATED_HANDLING) \
		               $$SPARKLE_ARCHS \
		               -sdk $(SDK_DIR) \
		               BUILD_NAME=build \
		               MACOSX_DEPLOYMENT_TARGET=$(MACOSX_DEPLOYMENT_TARGET)" ; \
	cd "$(SPARKLE_BUILD_DIR)";      \
	xcodebuild -project Sparkle.xcodeproj              \
			   -target Sparkle                         \
			   -configuration Release                  \
			   $$SPARKLE_FLAGS                         \
			   clean ;                                 \
	xcodebuild -project Sparkle.xcodeproj              \
			   -target Sparkle                         \
			   -configuration Release                  \
			   $$SPARKLE_FLAGS                         \
			   GCC_TREAT_WARNINGS_AS_ERRORS=NO         \
			   build ;                                 \
	cd $(TOPDIR) ;
	rm -f -r "$(SPARKLE_PRODUCTS_DIR)/Sparkle.framework"
	mkdir -p "$(SPARKLE_PRODUCTS_DIR)/Sparkle.framework"
	cp -X -f -R "$(SPARKLE_BUILD_DIR)/build/Release/Sparkle.framework/" \
	            "$(SPARKLE_PRODUCTS_DIR)/Sparkle.framework"
	touch built-sparkle
	@echo "THIRD_PARTY: Built Sparkle.framework"

built-sparkle-clean:
	@echo "THIRD_PARTY: Cleaning Sparkle.framework..."
	rm -f -R "$(SPARKLE_BUILD_DIR)"
	rm -f -R "$(SPARKLE_PRODUCTS_DIR)"
	rm -f -r "$(BUILD_DIR)/__MACOSX"
	rm -f built-sparkle
	rm -f build-sparkle-prepare
	@echo "THIRD_PARTY: Cleaned Sparkle.framework"
